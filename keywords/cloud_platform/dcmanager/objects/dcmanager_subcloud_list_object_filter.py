from typing import Optional

from keywords.cloud_platform.dcmanager.objects.dcmanager_subcloud_list_backup_enum import DcManagerSubcloudListBackupEnum
from keywords.cloud_platform.dcmanager.objects.dcmanager_subcloud_list_deploy_enum import DcManagerSubcloudListDeployEnum
from keywords.cloud_platform.dcmanager.objects.dcmanager_subcloud_list_prestage_enum import DcManagerSubcloudListPrestageEnum
from keywords.cloud_platform.dcmanager.objects.dcmanager_subcloud_list_sync_enum import DcManagerSubcloudListSyncEnum
from keywords.cloud_platform.dcmanager.objects.dcmanger_subcloud_list_availability_enum import DcManagerSubcloudListAvailabilityEnum
from keywords.cloud_platform.dcmanager.objects.dcmanger_subcloud_list_management_enum import DcManagerSubcloudListManagementEnum


class DcManagerSubcloudListObjectFilter:
    """
    Represents an input filter used to select DcManagerSubcloudListObject objects generated by the execution of the dcmanager subcloud list command.
    """

    def __init__(self):
        self.id: Optional[str] = None
        self.name: Optional[str] = None
        self.management: Optional[DcManagerSubcloudListManagementEnum] = None
        self.availability: Optional[DcManagerSubcloudListAvailabilityEnum] = None
        self.deploy_status: Optional[DcManagerSubcloudListDeployEnum] = None
        self.sync: Optional[DcManagerSubcloudListSyncEnum] = None
        self.backup_status: Optional[DcManagerSubcloudListBackupEnum] = None
        self.prestage_status: Optional[DcManagerSubcloudListPrestageEnum] = None

    @staticmethod
    def get_healthy_subcloud_filter():
        """
        Static method to create an instance of DcManagerSubcloudListFilter.

        Args: None

        Returns:
            DcManagerSubcloudListObjectFilter: a configuration of this filter configured as managed, online,
            deploy complete, and synchronized.
        """
        healthy_filter = DcManagerSubcloudListObjectFilter()
        healthy_filter.set_management(DcManagerSubcloudListManagementEnum.MANAGED)
        healthy_filter.set_availability(DcManagerSubcloudListAvailabilityEnum.ONLINE)
        healthy_filter.set_deploy_status(DcManagerSubcloudListDeployEnum.COMPLETE)
        healthy_filter.set_sync(DcManagerSubcloudListSyncEnum.IN_SYNC)
        return healthy_filter

    @staticmethod
    def get_out_of_sync_subcloud_filter():
        """
        Static method to create an instance of DcManagerSubcloudListFilter.

        Args: None

        Returns:
            DcManagerSubcloudListObjectFilter: a configuration of this filter configured as managed, online,
            deploy complete, and out-of-sync.
        """
        out_of_sync_filter = DcManagerSubcloudListObjectFilter()
        out_of_sync_filter.set_management(DcManagerSubcloudListManagementEnum.MANAGED)
        out_of_sync_filter.set_availability(DcManagerSubcloudListAvailabilityEnum.ONLINE)
        out_of_sync_filter.set_deploy_status(DcManagerSubcloudListDeployEnum.COMPLETE)
        out_of_sync_filter.set_sync(DcManagerSubcloudListSyncEnum.OUT_OF_SYNC)
        return out_of_sync_filter

    @staticmethod
    def get_unmanaged_subcloud_filter():
        """
        Static method to create an instance of DcManagerSubcloudListFilter.

        Args: None

        Returns:
            DcManagerSubcloudListObjectFilter: a configuration of this filter configured as unmanaged, online,
            deploy complete and out-of-sync.
        """
        out_of_sync_filter = DcManagerSubcloudListObjectFilter()
        out_of_sync_filter.set_management(DcManagerSubcloudListManagementEnum.UNMANAGED)
        out_of_sync_filter.set_availability(DcManagerSubcloudListAvailabilityEnum.ONLINE)
        out_of_sync_filter.set_deploy_status(DcManagerSubcloudListDeployEnum.COMPLETE)
        out_of_sync_filter.set_sync(DcManagerSubcloudListSyncEnum.OUT_OF_SYNC)
        return out_of_sync_filter

    def get_id(self) -> str:
        """
        Getter for the filter by Subcloud Id.
        """
        return self.id

    def set_id(self, id: str):
        """
        Setter for the filter by Subcloud Id.
        """
        self.id = id

    def get_name(self) -> Optional[str]:
        """
        Getter for the filter by Subcloud name.
        """
        return self.name

    def set_name(self, name: str):
        """
        Setter for the filter by Subcloud name.
        """
        self.name = name

    def get_management(self) -> DcManagerSubcloudListManagementEnum:
        """
        Getter for the filter by Subcloud management.
        """
        return self.management

    def set_management(self, management: DcManagerSubcloudListManagementEnum):
        """
        Setter for the filter by Subcloud management.
        """
        self.management = management

    def get_availability(self) -> DcManagerSubcloudListAvailabilityEnum:
        """
        Getter for the filter by Subcloud availability.
        """
        return self.availability

    def set_availability(self, availability: DcManagerSubcloudListAvailabilityEnum):
        """
        Setter for the filter by Subcloud availability.
        """
        self.availability = availability

    def get_deploy_status(self) -> DcManagerSubcloudListDeployEnum:
        """
        Getter for the filter by Subcloud deploy status.
        """
        return self.deploy_status

    def set_deploy_status(self, deploy_status: DcManagerSubcloudListDeployEnum):
        """
        Setter for the filter by Subcloud deploy status.
        """
        self.deploy_status = deploy_status

    def get_sync(self) -> DcManagerSubcloudListSyncEnum:
        """
        Getter for the filter by Subcloud sync status.
        """
        return self.sync

    def set_sync(self, sync: DcManagerSubcloudListSyncEnum):
        """
        Setter for the filter by Subcloud sync status.
        """
        self.sync = sync

    def get_backup_status(self) -> Optional[DcManagerSubcloudListBackupEnum]:
        """
        Getter for the filter by Subcloud backup status.
        """
        return self.backup_status

    def set_backup_status(self, backup_status: DcManagerSubcloudListBackupEnum):
        """
        Setter for the filter by Subcloud backup status.
        """
        self.backup_status = backup_status

    def get_prestage_status(self) -> Optional[DcManagerSubcloudListPrestageEnum]:
        """
        Getter for the filter by Subcloud prestage status.
        """
        return self.prestage_status

    def set_prestage_status(self, prestage_status: DcManagerSubcloudListPrestageEnum):
        """
        Setter for the filter by Subcloud prestage status.
        """
        self.prestage_status = prestage_status
